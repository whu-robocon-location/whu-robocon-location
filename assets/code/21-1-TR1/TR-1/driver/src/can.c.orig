#include "main.h"

void Answer(char a,char b,char c);
void can_init(void)
{
	CAN_InitTypeDef        can;
	CAN_FilterInitTypeDef  can_filter;
	GPIO_InitTypeDef       gpio;
	NVIC_InitTypeDef       nvic;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_CAN1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_CAN1);

	gpio.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_11;
	gpio.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOA, &gpio);
	
	nvic.NVIC_IRQChannel = CAN1_RX0_IRQn;
	nvic.NVIC_IRQChannelPreemptionPriority =1;
	nvic.NVIC_IRQChannelSubPriority = 1;
	nvic.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic);
			
	CAN_DeInit(CAN1);
	CAN_StructInit(&can);
	
	can.CAN_TTCM = DISABLE;
	can.CAN_ABOM = DISABLE;
	can.CAN_AWUM = DISABLE;
	can.CAN_NART = DISABLE;
	can.CAN_RFLM = DISABLE;
	can.CAN_TXFP = ENABLE;
	can.CAN_Mode = CAN_Mode_Normal;
	can.CAN_SJW  = CAN_SJW_1tq;
	can.CAN_BS1 = CAN_BS1_9tq;
	can.CAN_BS2 = CAN_BS2_4tq;
	can.CAN_Prescaler = 3;   //CAN BaudRate 42/(1+9+4)/3=1Mbps
	CAN_Init(CAN1, &can);

	can_filter.CAN_FilterNumber=0;
	can_filter.CAN_FilterMode=CAN_FilterMode_IdList;
	can_filter.CAN_FilterScale=CAN_FilterScale_32bit;
    can_filter.CAN_FilterIdHigh = 0x0001;
    can_filter.CAN_FilterIdLow = 0x0200;
    can_filter.CAN_FilterMaskIdHigh = 0x0001;
    can_filter.CAN_FilterMaskIdLow = 0x0000;		
	//以上4句，限制只接受ID为0x0000011_的报文
	can_filter.CAN_FilterFIFOAssignment=0;
	can_filter.CAN_FilterActivation=ENABLE;
	CAN_FilterInit(&can_filter);
	
//  can_filter.CAN_FilterNumber=1;
//	can_filter.CAN_FilterMode=CAN_FilterMode_IdMask;
//	can_filter.CAN_FilterScale=CAN_FilterScale_32bit;
//	can_filter.CAN_FilterIdHigh=((0x00000100<<21)&0xffff0000)>>16;
//	can_filter.CAN_FilterIdLow=((0x00000100<<21)|CAN_ID_STD|CAN_RTR_DATA)&0xffff;
//	can_filter.CAN_FilterMaskIdHigh=0xFFFF;
//	can_filter.CAN_FilterMaskIdLow=0xFFFF;		
//	//以上4句，限制只接受ID为0x0100的报文
//	can_filter.CAN_FilterFIFOAssignment=0;
//	can_filter.CAN_FilterActivation=ENABLE;
//	CAN_FilterInit(&can_filter);
//	
  CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);
}

u8 Position_Send(POSITION* position)						   //给主控发送位置数据
{ 
	CanTxMsg tx_message;
	tx_message.StdId = 0x00020101;							//报文ID号
	tx_message.DLC = 0x08;								//数据字节数
	tx_message.RTR = CAN_RTR_Data;				//数据帧
	tx_message.IDE = CAN_Id_Extended;			//标准ID
	
    tx_message.Data[0] =  0x41;
    tx_message.Data[1] =  'P';
    tx_message.Data[2] = (uint8_t)((int16_t)(position->X * 10));             //精确到mm
    tx_message.Data[3] = (uint8_t)((int16_t)(position->X * 10) >> 8);
    tx_message.Data[4] = (uint8_t)((int16_t)(position->Y * 10));
    tx_message.Data[5] = (uint8_t)((int16_t)(position->Y * 10) >> 8);
    tx_message.Data[6] = (uint8_t)((int16_t)(position->AngleDeg * 10));
    tx_message.Data[7] = (uint8_t)((int16_t)(position->AngleDeg * 10) >> 8);

//	while((CAN1->TSR & CAN_TSR_TME) == 0)
//		OSTimeDly(2);
	if(CAN_Transmit(CAN1,&tx_message)==CAN_TxStatus_NoMailBox)
		return 1;
	else
		return 0;
}

u8 Speed_Send(SPEED* speed)																//给主控发送速度数据 次/5ms
{
	CanTxMsg tx_message;
    tx_message.ExtId = 0x00020101;
    tx_message.DLC = 0x08;
    tx_message.RTR = CAN_RTR_Data;
    tx_message.IDE = CAN_Id_Extended;
	
    tx_message.Data[0] =  0x41;
    tx_message.Data[1] =  'S';
    tx_message.Data[2] = (uint8_t)((int16_t)(speed->Vx * 10));
    tx_message.Data[3] = (uint8_t)((int16_t)(speed->Vx * 10) >> 8);
    tx_message.Data[4] = (uint8_t)((int16_t)(speed->Vy * 10));
    tx_message.Data[5] = (uint8_t)((int16_t)(speed->Vy * 10) >> 8);
    tx_message.Data[6] = (uint8_t)((int16_t)(speed->Vw * 10));
    tx_message.Data[7] = (uint8_t)((int16_t)(speed->Vw * 10) >> 8);

//	tx_message.Data[6] = (uint8_t)((int16_t)(speed->V*10));
//	tx_message.Data[7] = (uint8_t)((int16_t)(speed->V*10)>>8);
	
//	while((CAN1->TSR & CAN_TSR_TME) == 0)
//		OSTimeDly(2);
	if(CAN_Transmit(CAN1,&tx_message)==CAN_TxStatus_NoMailBox)
		return 1;
	else
		return 0;
}




//该函数待修改
u8 Diatance_Send(POSITION* position)																//发送距离数据
{
	CanTxMsg tx_message;
	tx_message.StdId = 0x106;
	tx_message.DLC = 0x08;
	tx_message.RTR = CAN_RTR_Data;
	tx_message.IDE = CAN_Id_Standard;
	
	EncodeFloatData(&(position->Sum_Encoder1),tx_message.Data);
	EncodeFloatData(&(position->Sum_Encoder2),tx_message.Data+4);
	
//	while((CAN1->TSR & CAN_TSR_TME) == 0)
//		OSTimeDly(2);
	if(CAN_Transmit(CAN1,&tx_message)==CAN_TxStatus_NoMailBox)
		return 1;
	else
		return 0;
}

unsigned char Muxdata_Send(u16 original,u16 kal,u16 second_order,u16 zero_point)//发送AD原始数据，卡尔曼滤波后数据，二阶低通滤波后数据,当前零点
{
	CanTxMsg tx_message;
	tx_message.StdId = 0x108;
	tx_message.DLC = 0x08;
	tx_message.RTR = CAN_RTR_Data;
	tx_message.IDE = CAN_Id_Standard;
	
	EncodeU16Data(&original,tx_message.Data);
	EncodeU16Data(&kal,tx_message.Data);
	EncodeU16Data(&second_order,tx_message.Data);
	EncodeU16Data(&zero_point,tx_message.Data);
	
//	while((CAN1->TSR & CAN_TSR_TME) == 0)
//		OSTimeDly(2);
	if(CAN_Transmit(CAN1,&tx_message)==CAN_TxStatus_NoMailBox)
		return 1;
	else
		return 0;
}

unsigned char GyroAngle_Send(float a)		//陀螺仪角度
{
	CanTxMsg tx_message;
	tx_message.StdId = 0x109;
	tx_message.DLC = 0x04;
	tx_message.RTR = CAN_RTR_Data;
	tx_message.IDE = CAN_Id_Standard;
	
	EncodeFloatData(&a, tx_message.Data);
	
//	while((CAN1->TSR & CAN_TSR_TME) == 0)
//		OSTimeDly(2);
	if(CAN_Transmit(CAN1,&tx_message)==CAN_TxStatus_NoMailBox)
		return 1;
	else
		return 0;
}

void SelfTest(void)
{
	CanTxMsg tx_message;
    tx_message.ExtId = 0x00020101;
    tx_message.DLC = 0x05;
    tx_message.RTR = CAN_RTR_Data;
    tx_message.IDE = CAN_Id_Extended;

    tx_message.Data[0] =  0x41;
    tx_message.Data[1] =  'C';
    tx_message.Data[2] = (uint8_t)'W';
    tx_message.Data[3] = (uint8_t)'H';
    tx_message.Data[4] = (uint8_t)'U';

	while((CAN1->TSR & CAN_TSR_TME) == 0)
		OSTimeDly(2);
	CAN_Transmit(CAN1,&tx_message);
}

void Reset_RS(void)     //复位响应
{
    CanTxMsg tx_message;
    tx_message.ExtId = 0x00020101;
    tx_message.DLC = 0x04;
    tx_message.RTR = CAN_RTR_Data;
    tx_message.IDE = CAN_Id_Extended;

    tx_message.Data[0] =  0x41;
    tx_message.Data[1] =  'R';
    tx_message.Data[2] = (uint8_t)'R';
    tx_message.Data[3] = (uint8_t)'S';
	
		while((CAN1->TSR & CAN_TSR_TME) == 0)
		OSTimeDly(2);
	  CAN_Transmit(CAN1, &tx_message);
}

void Answer(char a,char b,char c)  //到达指定位置
{
	CanTxMsg tx_message;
	tx_message.StdId = 0x212;							//报文ID号
	tx_message.RTR = CAN_RTR_Data;				//数据帧
	tx_message.IDE = CAN_Id_Standard;			//标准ID	
	tx_message.DLC = 0x03;								            //数据字节数
	tx_message.Data[0] = a;		
	tx_message.Data[1] = b;
	tx_message.Data[2] = c;
	CAN_Transmit(CAN1,&tx_message);
}


void CAN1_RX0_IRQHandler(void)
{
    CanRxMsg rx_message;
    if (CAN_GetITStatus(CAN1,CAN_IT_FMP0)!= RESET) 
    {
			CAN_ClearITPendingBit(CAN1, CAN_IT_FF0);
			CAN_Receive(CAN1, CAN_FIFO0, &rx_message);
			//复位指令，同时复位陀螺
			if((rx_message.ExtId == 0x00010000) && (rx_message.RTR == CAN_RTR_Data) && (rx_message.IDE == CAN_Id_Extended))
			{
				if(rx_message.Data[0] == 0x00 && rx_message.Data[1] == 'R' && rx_message.Data[2] == 'R' && rx_message.Data[3] == 'S')
            {
				float temp,temp_sin,temp_cos;	//用于寄存公用的三角函数运算值，减少重复计算
//				Answer('R','E','Y');
				Position_Now.AngleDeg=(double)((s16)(((u16)(rx_message.Data[5])<<8)|rx_message.Data[4])) * 0.1;
				temp = (Position_Now.AngleDeg+Angle2)*PI/180;
				temp_cos = cos(temp);
				temp_sin = sin(temp);
				Position_Now.X=(double)((s16)(((u16)(rx_message.Data[1])<<8)|rx_message.Data[0])) * 0.1 + OO_distance*temp_cos;
				Position_Now.Y=(double)((s16)(((u16)(rx_message.Data[3])<<8)|rx_message.Data[2])) * 0.1 + OO_distance*temp_sin;
				
//				Position_Now.X=(double)((s16)(((u16)(rx_message.Data[1])<<8)|rx_message.Data[0])) * 0.1;
//				Position_Now.Y=(double)((s16)(((u16)(rx_message.Data[3])<<8)|rx_message.Data[2])) * 0.1;
				RST_flag = 1;
				GYRO_Reset();
			}
			 if(rx_message.Data[0] == 0x00 && rx_message.Data[1] == 'C' && rx_message.Data[2] == 'W' && rx_message.Data[3] == 'H' && rx_message.Data[4] == 'U')
            {
                zj = 1;
            }
					}
			//复位指令，但不复位陀螺
			else if((rx_message.ExtId == 0x00010200) && (rx_message.RTR == CAN_RTR_Data) && (rx_message.IDE == CAN_Id_Extended))
			{
				           if(rx_message.Data[0] == 0x01 && rx_message.Data[1] == 'R')
            {
				float temp,temp_sin,temp_cos;	//用于寄存公用的三角函数运算值，减少重复计算
//        Answer('R','E','N');
				Position_Now.AngleDeg=(double)((s16)(((u16)(rx_message.Data[5])<<8)|rx_message.Data[4])) * 0.1;
				temp = (Position_Now.AngleDeg + Angle2)*PI/180;
				temp_cos = cos(temp);
				temp_sin = sin(temp);	
				Position_Now.X=(double)((s16)(((u16)(rx_message.Data[1])<<8)|rx_message.Data[0])) * 0.1 + OO_distance*temp_cos;
				Position_Now.Y=(double)((s16)(((u16)(rx_message.Data[3])<<8)|rx_message.Data[2])) * 0.1 + OO_distance*temp_sin;
				
//				Position_Now.X=(double)((s16)(((u16)(rx_message.Data[1])<<8)|rx_message.Data[0])) * 0.1;
//				Position_Now.Y=(double)((s16)(((u16)(rx_message.Data[3])<<8)|rx_message.Data[2])) * 0.1;
                FLAG = 1;
						}
			}
			
			//监视修正后数据
//			else if((rx_message.StdId==0x113)&&(rx_message.DLC==0x06)&&(rx_message.RTR==CAN_RTR_Data)&&(rx_message.IDE==CAN_Id_Standard))
//			{
//				Position_Correct.real_x=(double)((s16)(((u16)(rx_message.Data[1])<<8)|rx_message.Data[0]));	
//				Position_Correct.dt_del_x=(double)((s16)(((u16)(rx_message.Data[3])<<8)|rx_message.Data[2]));
//				Position_Correct.real_y=(double)((s16)(((u16)(rx_message.Data[5])<<8)|rx_message.Data[4]));
//				Position_Correct.dt_del_y=(double)((s16)(((u16)(rx_message.Data[7])<<8)|rx_message.Data[6]));
//			} 
			
			else if((rx_message.StdId==0x113)&&(rx_message.DLC==0x05)&&(rx_message.RTR==CAN_RTR_Data)&&(rx_message.IDE==CAN_Id_Standard))
			{
				float temp;
				if(rx_message.Data[0] == 'A')
				{
						DecodeFloatData(&temp,&rx_message.Data[1]);
						temp = temp*PI/180;
						Angle1 = -1*PI/4 + Angle_wrong_blue - temp;
				}
					if(rx_message.Data[0] == 'B')
				{
						DecodeFloatData(&temp,&rx_message.Data[1]);
						temp = temp*PI/180;
						Angle1 = -1*PI/4 + Angle_wrong_red + temp;
				}
			}
			
//			else if((rx_message.StdId==0x100)&&(rx_message.DLC==0x03)&&(rx_message.RTR==CAN_RTR_Data)&&(rx_message.IDE==CAN_Id_Standard))
//			{
//				if(rx_message.Data[0]=='W'&&rx_message.Data[1]=='H'&&rx_message.Data[2]=='U')
//				{
//					zj = 1;
//				}
//				if(rx_message.Data[0]=='R'&&rx_message.Data[1]=='E'&&rx_message.Data[2]=='S')
//				{
//					Answer('R','E','S');
//					__set_FAULTMASK(1);
//    			NVIC_SystemReset();
//				}
			}
		
		}

